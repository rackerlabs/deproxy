Clean up code
    PortFinder, esp. fields
    convert docstrings to javadoc
    explicit types where beneficial
        message chains
        addEndpoint, etc
        ClientConnector
        handlers
    rename setUp to setup and tearDown to cleanup in spock unit tests

port route
un-ignore or get rid of ignored tests
port all unit tests
add to default request headers test

update docs
    old functionality needs to documented
        object model
            request
            response
            handling
            message chains
    new functionality has been added, needs to be documented
        client connectors
            bare
            default
        http message utility classes
            BodyReader
            BodyWriter
            HeaderReader
            HeaderWriter
            LineReader
        diagnostic utility classes
            LocalSocketPair
            PortFinder
            StaticTcpServer

distinction between message body and transfer-encoded message body, between
        the request/response and the bytes-on-the-wire
compression (content coding)
    will likely require changes to the object model

rfc 2616 ยง 3.6 in BodyReader.readBody #2 --> return 501

super-easy assertions on message chains, handlings, requests, and responses - for use by importers
extract classes for handling http version 0.9, 1.0, and 1.1
    extract client connector -> Conforming vs. Bare
        create a new client connector or update an existing one to be fully complient with RFC 2616
    extract server connector -> Conforming vs. Bare
        HandlerContext
        2-parameter handlers
add endpoint parameter to handler functions, so we know who handled the request ?
    no use-case for this yet

clean endpoint failure, e.g. if address already in use
    shouldn't get added to _endpoints list
    thread(s) should be shut down
option on route to be transparent or not (see http rfc) ?
    route should use the conforming client connector above
    not sure which server connector to use

server-side https
test https
test route https
extensive tests for uri's paths and query parameters
    consider illegal chars
    consider non-ascii chars
    consider escaping

better logging
    option whether or not to log request/response bodies - off by default
